# -*- coding: utf-8 -*-
# Generated by Django 1.11.2 on 2019-01-02 23:10
from __future__ import unicode_literals

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import examiner.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('semesterpage', '0029_auto_20181228_0012'),
    ]

    operations = [
        migrations.CreateModel(
            name='DocumentInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_type', models.CharField(blank=True, choices=[('Exam', 'Eksamen'), ('Exercise', 'Øving'), ('Project', 'Prosjekt'), ('Irrelevant', 'Urelevant'), (None, 'Ubestemt')], default=None, help_text='PDF-ens innholdstype, f.eks. "eksamen".', max_length=20, null=True)),
                ('course_code', models.CharField(blank=True, help_text='Eksamens fagkode.', max_length=10, null=True)),
                ('language', models.CharField(blank=True, choices=[('Bokmål', 'Bokmål'), ('Nynorsk', 'Nynorsk'), ('Engelsk', 'Engelsk'), (None, 'Ukjent')], help_text='Språket som eksamen er skrevet i.', max_length=20, null=True)),
                ('year', models.PositiveSmallIntegerField(blank=True, help_text='Året som eksamen ble holdt.', null=True)),
                ('season', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'Vår'), (2, 'Kontinuasjonseksamen'), (3, 'Høst'), (None, 'Ukjent')], help_text='Semestertype når eksamen ble holdt.', null=True)),
                ('solutions', models.BooleanField(default=False, help_text='Om filen inneholder løsningsforslag.')),
                ('exercise_number', models.PositiveSmallIntegerField(blank=True, default=None, help_text='Øvingsnummer hvis dokumentet er en øving eller et prosjekt.', null=True, verbose_name='Øvingsnummer')),
                ('course', models.ForeignKey(blank=True, help_text='Faget som eksamenen tilhører.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='docinfos', to='semesterpage.Course')),
            ],
            options={
                'ordering': ('course_code', '-year', '-solutions'),
            },
        ),
        migrations.CreateModel(
            name='DocumentInfoSource',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('document_info', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='examiner.DocumentInfo')),
            ],
        ),
        migrations.CreateModel(
            name='ExamRelatedCourse',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('secondary_course_code', models.CharField(help_text='Emnekoden til sekundærfaget, f.eks. "SIF5013".', max_length=15, unique=True, verbose_name='sekundæremnekode')),
                ('primary_course', models.ForeignKey(help_text='Faget som regnes som hovedfaget.', on_delete=django.db.models.deletion.CASCADE, related_name='secondary_courses', to='semesterpage.Course')),
                ('secondary_course', models.OneToOneField(blank=True, help_text='Faget som er underordnet hovedfaget.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='primary_course', to='semesterpage.Course')),
            ],
        ),
        migrations.CreateModel(
            name='Pdf',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(help_text='Kopi av fil hostet på en url.', upload_to=examiner.models.upload_path)),
                ('sha1_hash', models.CharField(help_text='Unik sha1 hash relativt til filinnhold.', max_length=40, unique=True, validators=[django.core.validators.RegexValidator(message='Not a valid SHA1 hash string.', regex='^[0-9a-f]{40}$')])),
                ('created_at', models.DateTimeField(editable=False)),
                ('updated_at', models.DateTimeField()),
                ('exams', models.ManyToManyField(help_text='Hvilke eksamenssett PDFen trolig inneholder.', related_name='pdfs', through='examiner.DocumentInfoSource', to='examiner.DocumentInfo')),
            ],
        ),
        migrations.CreateModel(
            name='PdfPage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.PositiveSmallIntegerField(help_text='Sidetall.')),
                ('text', models.TextField(help_text='Sideinnhold i rent tekstformat.')),
                ('confidence', models.PositiveIntegerField(default=None, help_text='Konfidens til evt. OCR av tekstinnhold.', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('pdf', models.ForeignKey(help_text='Tilhørende PDF fil.', on_delete=django.db.models.deletion.CASCADE, related_name='pages', to='examiner.Pdf')),
            ],
            options={
                'ordering': ('pdf', 'number'),
            },
        ),
        migrations.CreateModel(
            name='PdfUrl',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.TextField(unique=True, validators=[django.core.validators.URLValidator()])),
                ('filename', models.CharField(help_text='Ressursens filnavn.', max_length=255)),
                ('probably_exam', models.BooleanField(default=False, help_text='Om denne filen trolig er relatert til en eksamen.')),
                ('dead_link', models.NullBooleanField(default=None, help_text='Om URLen faktisk tjener relevant innhold.')),
                ('created_at', models.DateTimeField(editable=False)),
                ('updated_at', models.DateTimeField()),
                ('exam', models.ForeignKey(help_text='Hvilken innholdstype URLen trolig tjener.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='urls', to='examiner.DocumentInfo')),
                ('scraped_pdf', models.ForeignKey(help_text='Kopi av filen fra URLen.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='hosted_at', to='examiner.Pdf')),
                ('verified_by', models.ManyToManyField(help_text='Brukere som har verifisert metadataen.', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='documentinfosource',
            name='pdf',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='examiner.Pdf'),
        ),
        migrations.AddField(
            model_name='documentinfosource',
            name='verified_by',
            field=models.ManyToManyField(help_text='Brukere som har verifisert metadataen.', related_name='verified_exam_pdfs', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterUniqueTogether(
            name='pdfpage',
            unique_together=set([('pdf', 'number')]),
        ),
        migrations.AlterUniqueTogether(
            name='documentinfo',
            unique_together=set([('content_type', 'course_code', 'language', 'year', 'season', 'solutions', 'exercise_number')]),
        ),
    ]
